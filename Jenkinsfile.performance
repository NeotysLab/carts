@Library('dynatrace@master') _

pipeline
{
  agent
  {
    label 'git'
  }
  environment
  {
    APP_NAME = "carts"
    TAG_DEV = "${env.TAG}:${env.VERSION}-${env.BUILD_NUMBER}"
    TAG_STAGING = "${env.TAG}:${env.VERSION}"
    DYNATRACEID="${env.DT_ACCOUNTID}"
    DYNATRACEAPIKEY="${env.DT_API_TOKEN}"
    NLAPIKEY="${env.NL_WEB_API_KEY}"
    OUTPUTSANITYCHECK="$WORKSPACE/infrastructure/sanitycheck.json"
    DYNATRACEPLUGINPATH="$WORKSPACE/lib/DynatraceIntegration-2.0.11-SNAPSHOT.jar"
  }
  stages
  {
    stage('Maven build')
    {
        steps
        {
          checkout scm
          container('maven')
          {
            sh 'mvn -B clean package -DdynatraceId=$DYNATRACEID -DneoLoadWebAPIKey=$NLAPIKEY -DdynatraceApiKey=$DYNATRACEAPIKEY -Dtags=${env.APP_NAME} -DoutPutReferenceFile=$DYNATRACEPLUGINPATH -DcustomActionPath=$OUTPUTSANITYCHECK'
          }
        }
    }
    stage('Start NeoLoad infrastructure')
    {
          agent { label 'master' }
          steps
          {
               sh  'docker-compose -f infrastructure/infrastructure/neoload/lg/docker-compose.yml up -d'
               stash includes: 'infrastructure/infrastructure/neoload/lg/lg.yaml', name: 'LG'
               stash includes: 'infrastructure/infrastructure/neoload/test/scenario.yaml', name: 'scenario'
          }
     }
     stage('Run health check in dev')
     {
        when
        {
          expression
          {
            return env.BRANCH_NAME ==~ 'release/.*' || env.BRANCH_NAME ==~'master'
           }
        }
         agent
         {
              dockerfile
              {
                args '--user root -v /tmp:/tmp --network cpv --env license=$WORKSPACE/infrastructure/infrastructure/neoload/licence.lic'
                dir 'infrastructure/infrastructure/neoload/controller'
              }
          }
          steps
          {
              echo "Waiting for the service to start..."
              sleep 150

              container('Neoload')
              {
                script
                {
                       def status =neoloadRun executable: '/home/neoload/neoload/bin/NeoLoadCmd',
                            project: "$WORKSPACE/target/neoload/Carts_NeoLoad/Carts_NeoLoad.nlp",
                            testName: 'HealthCheck_${BUILD_NUMBER}',
                            testDescription: 'HealthCheck_${BUILD_NUMBER}',
                            commandLineOption: "-nlweb -loadGenerators $WORKSPACE/infrastructure/infrastructure/neoload/lg/lg.yaml -nlwebToken $NLAPIKEY -variables host=${env.APP_NAME}.dev,port=80,basicPath=/health",
                            scenario: 'DynatraceSanityCheck',
                            trendGraphs: [

                                 'AvgResponseTime',
                                 'ErrorRate'
                            ]
                        if (status != 0)
                       {
                            currentBuild.result = 'FAILED'
                            error "Health check in dev failed."

                       }
                }
              }
           }
      }
      stage('Sanity Check')
      {
            when
            {
              expression
              {
                return env.BRANCH_NAME ==~ 'release/.*' || env.BRANCH_NAME ==~'master'
              }
            }
            agent
            {
                  dockerfile
                  {
                    args '--user root -v /tmp:/tmp --network cpv --env license=$WORKSPACE/infrastructure/infrastructure/neoload/licence.lic'
                    dir 'infrastructure/infrastructure/neoload/controller'
                  }
             }
             steps
             {
                  echo "Waiting for the service to start..."
                  sleep 150

                  container('Neoload')
                  {
                    script
                    {
                           def status =neoloadRun executable: '/home/neoload/neoload/bin/NeoLoadCmd',
                                    project: "$WORKSPACE/target/neoload/Carts_NeoLoad/Carts_NeoLoad.nlp",
                                    testName: 'SANITYCHECK_${BUILD_NUMBER}',
                                    testDescription: 'SANITYCHECK_${BUILD_NUMBER}',
                                    commandLineOption: "-nlweb -loadGenerators $WORKSPACE/infrastructure/infrastructure/neoload/lg/lg.yaml -nlwebToken $NLAPIKEY -variables host=${env.APP_NAME}.dev,port=80,basicPath=/health",
                                    scenario: 'DYNATRACE_SANITYCHECK',
                                    trendGraphs: [
                                         'ErrorRate'
                                    ]
                           if (status != 0)
                           {
                                currentBuild.result = 'FAILED'
                                error "Health check in dev failed."

                           }
                    }
                    //---add the push of the sanity check---
                     sh '''
                             git add OUTPUTSANITYCHECK
                             git commit -am 'Sanity Check ${BUILD_NUMBER}'
                             git push origin master
                        '''
                  }
              }
      }
      stage('Performance Check')
      {
          agent
         {
              dockerfile
              {
                args '--user root -v /tmp:/tmp --network cpv --env license=$WORKSPACE/infrastructure/infrastructure/neoload/licence.lic'
                dir 'infrastructure/infrastructure/neoload/controller'
              }
          }
        steps
        {
            recordDynatraceSession(
                  envId: 'Dynatrace Tenant',
                  testCase: 'loadtest',
                  tagMatchRules: [
                    [
                      meTypes: [
                        [meType: 'SERVICE']
                      ],
                      tags: [
                        [context: 'CONTEXTLESS', key: 'app', value: "${env.APP_NAME}"],
                        [context: 'CONTEXTLESS', key: 'environment', value: 'dev']
                      ]
                    ]
                  ]
            )

          container('neoload')
          {
           script
            {
                 def status =neoloadRun executable: '/home/neoload/neoload/bin/NeoLoadCmd',
                 project: "$WORKSPACE/target/neoload/Carts_NeoLoad/Carts_NeoLoad.nlp",
                 testName: 'Performance__${BUILD_NUMBER}',
                 testDescription: 'Performance__${BUILD_NUMBER}',
                 commandLineOption: "-nlweb -loadGenerators $WORKSPACE/infrastructure/infrastructure/neoload/lg/lg.yaml -nlwebToken $NLAPIKEY -variables host=${env.APP_NAME}.dev,port=80",
                 scenario: 'Cart_Load',
                 trendGraphs: [
                                     [
                                         name: 'Transactions Response Time',
                                         curve: [
                                                     'AddItemToCart>Actions>AddItem'

                                                 ],
                                         statistic: 'average'
                                     ],
                                     [
                                         name: 'User Load',
                                         curve: ['Controller/User Load'],
                                         statistic: 'average'
                                     ],

                                     'AvgResponseTime',
                                     'ErrorRate'
                             ]

                  if (status != 0)
                 {
                   currentBuild.result = 'FAILED'
                   error "Load Test on cart."
                 }
            }
          }


        perfSigDynatraceReports(
          envId: 'Dynatrace Tenant',
          nonFunctionalFailure: 1,
          specFile: "monspec/${env.APP_NAME}_perfsig.json"
        )
      }
    }
  }
}
